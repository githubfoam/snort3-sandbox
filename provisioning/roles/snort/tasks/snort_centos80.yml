---
- name: "Uploading CentOS-PowerTools.repo file"
  template:
      src: CentOS-PowerTools.repo.j2
      dest: /etc/yum.repos.d/CentOS-PowerTools.repo
      owner: root
      group: root
      mode: 0644
- name: "Set timezone to Europe/Belfast cat /etc/timezone"
  timezone:
    name: 'Europe/Belfast'
- name: "Install required packages before installing snort"
  package:
    name: "{{ snort_centos80_pre_reqs }}"
    state: present
- name: "Create source build directory if it does not exist"
  file:
    path: "{{ base_dir }}"
    state: directory
    mode: '0755'
#  libdaq
- name: "Download and install Data AcQuisition library-DAQ Snort3 uses a different DAQ than the Snort 2.9.x.x series"
  git:
    repo: https://github.com/snort3/libdaq.git
    dest: "{{ base_dir }}/libdaq"
- name: "Bootstrap libdaq "
  shell: ./bootstrap >> /tmp/libdaq_bootstrap.out
  args:
    chdir: "{{ base_dir }}/libdaq"
    creates: /tmp/libdaq_bootstrap.out
- name: "Configure libdaq "
  shell: ./configure  >> /tmp/libdaq_configure.out
  args:
    chdir: "{{ base_dir }}/libdaq"
    creates: /tmp/libdaq_configure.out
- name: "Make libdaq"
  shell: make  >> /tmp/libdaq_make.out
  args:
    chdir: "{{ base_dir }}/libdaq"
    creates: /tmp/libdaq_make.out
- name: "Make install libdaq"
  shell: make install >> /tmp/libdaq_makeinstall.out
  args:
    chdir: "{{ base_dir }}/libdaq"
    creates: /tmp/libdaq_makeinstall.out
- name: "Update shared libraries"
  shell: ldconfig >> /tmp/ldconfig.out
# colm
# - name: "Ragel requires installing colm first"
#   unarchive:
#     src: http://www.colm.net/files/colm/colm-{{ colm_version }}.tar.gz
#     dest: "{{ base_dir }}"
#     creates: "{{ base_dir }}/colm-{{ colm_version }}"
#     remote_src: yes
# - name: "Configure colm"
#   shell: ./configure  >> /tmp/colm_configure.out
#   args:
#     chdir: "{{ base_dir }}/colm-{{ colm_version }}"
#     creates: /tmp/colm_configure.out
# - name: "Make colm"
#   shell: "make -j$(nproc) >> /tmp/colm_make.out"
#   args:
#     chdir: "{{ base_dir }}/colm-{{ colm_version }}"
#     creates: /tmp/colm_make.out
# - name: "Make install colm"
#   shell: make -j$(nproc) install >> /tmp/colm_makeinstall.out
#   args:
#     chdir: "{{ base_dir }}/colm-{{ colm_version }}"
#     creates: /tmp/colm_makeinstall.out
# - name: "Update shared libraries ldconfig"
#   shell: ldconfig >> /tmp/ldconfig.out
# ragel
- name: "Installing ragel"
  unarchive:
    src: http://www.colm.net/files/ragel/ragel-{{ ragel_version }}.tar.gz
    dest: "{{ base_dir }}"
    creates: "{{ base_dir }}/ragel-{{ ragel_version }}"
    remote_src: yes
- name: "Configure ragel"
  shell: ./configure  >> /tmp/ragel_configure.out
  args:
    chdir: "{{ base_dir }}/ragel-{{ ragel_version }}"
    creates: /tmp/ragel_configure.out
- name: "Make ragel"
  shell: "make -j$(nproc) >> /tmp/ragel_make.out"
  args:
    chdir: "{{ base_dir }}/ragel-{{ ragel_version }}"
    creates: /tmp/ragel_make.out
- name: "Make install ragel"
  shell: make -j$(nproc) install >> /tmp/ragel_makeinstall.out
  args:
    chdir: "{{ base_dir }}/ragel-{{ ragel_version }}"
    creates: /tmp/ragel_makeinstall.out
- name: "Update shared libraries ldconfig"
  shell: ldconfig >> /tmp/ldconfig.out
#  Boost
- name: "Download the Boost 1.71.0 libraries into /tmp"
  unarchive:
    src: https://dl.bintray.com/boostorg/release/{{ boost_release }}/source/boost_{{ boost_version }}.tar.gz
    dest: "{{ base_dir }}"
    # creates: /tmp/boost_{{ boost_version }}
    creates: "{{ base_dir }}/boost_{{ boost_version }}"
    remote_src: yes
#  Hyperscan
- name: "Download Hyperscan 5.2.0"
  unarchive:
    src: https://github.com/intel/hyperscan/archive/v{{ hyperscan_version }}.tar.gz
    dest: "{{ base_dir }}"
    creates: "{{ base_dir }}/hyperscan-{{ hyperscan_version }}"
    remote_src: yes
- name: "Create hyperscan-xxx-build directory  if it does not exist"
  file:
    path: "{{ base_dir }}/hyperscan-{{ hyperscan_version }}-build"
    state: directory
    mode: '0755'
# Method 1 – BOOST_ROOT
# - name: "Create a symbolic link"
#   file:
#     src: "/tmp/boost_{{ boost_version }}"
#     dest: "/tmp/hyperscan-{{ hyperscan_version }}/include/boost"
#     state: link
# - name: "Install Hyperscan 5.2 from source, referencing the location of the Boost headers source directory"
#   shell: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local ../hyperscan-{{ hyperscan_version }} >> /tmp/hyperscan_cmake.out
#   args:
#     chdir: /tmp/hyperscan-{{ hyperscan_version }}-build
#     creates: /tmp/hyperscan_cmake.out

# Method 2 – BOOST_ROOT
- name: "Install Hyperscan 5.2 from source, referencing the location of the Boost headers source directory"
  shell: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DBOOST_ROOT={{ base_dir }}/boost_{{ boost_version }}/ ../hyperscan-{{ hyperscan_version }} >> /tmp/hyperscan_cmake.out
  args:
    chdir: "{{ base_dir }}/hyperscan-{{ hyperscan_version }}-build"
    creates: /tmp/hyperscan_cmake.out
- name: "Make Hyperscan 5.2"
  shell: make -j$(nproc) install  >> /tmp/hyperscan_make.out
  args:
    chdir: "{{ base_dir }}/hyperscan-{{ hyperscan_version }}-build"
    creates: /tmp/hyperscan_make.out
- name: "Make install Hyperscan 5.2"
  shell: make -j$(nproc) install >> /tmp/hyperscan_makeinstall.out
  args:
    chdir: "{{ base_dir }}/hyperscan-{{ hyperscan_version }}-build"
    creates: /tmp/hyperscan_makeinstall.out
#  flatbuffers
- name: "Download, Snort has an optional requirement for flatbuffers, A memory efficient serialization library into"
  unarchive:
    src: https://github.com/google/flatbuffers/archive/v{{ flatbuffers_version }}.tar.gz
    dest: "{{ base_dir }}"
    creates: "{{ base_dir }}/flatbuffers-{{ flatbuffers_version }}"
    remote_src: yes
- name: "Create flatbuffers-build directory  if it does not exist"
  file:
    path: "{{ base_dir }}/flatbuffers-build"
    state: directory
    mode: '0755'
- name: "Install flatbuffers from source"
  shell: cmake ../flatbuffers-{{ flatbuffers_version }}  >> /tmp/flatbuffers_cmake.out
  args:
    chdir: "{{ base_dir }}/flatbuffers-build"
    creates: /tmp/flatbuffers_cmake.out
- name: "Make flatbuffers"
  shell: make -j$(nproc) >> /tmp/flatbuffers_make.out
  args:
    chdir: "{{ base_dir }}/flatbuffers-build"
    creates: /tmp/flatbuffers_make.out
- name: "Make install flatbuffers"
  shell: make -j$(nproc) install  >> /tmp/flatbuffers_makeinstall.out
  args:
    chdir: "{{ base_dir }}/flatbuffers-build"
    creates: /tmp/flatbuffers_makeinstall.out
# safec
- name: "Extract safec for runtime bounds checks on certain legacy C-library calls,this is optional but recommended, into /tmp"
  unarchive:
    src: https://github.com/rurban/safeclib/releases/download/v{{ safec_major_version }}/libsafec-{{ safec_major_version }}.{{ safec_minor_version }}.tar.gz
    dest: "{{ base_dir }}"
    creates: "{{ base_dir }}/libsafec-{{ safec_major_version }}.{{ safec_minor_version }}"
    remote_src: yes
- name: "Configure safec"
  shell: ./configure  >> /tmp/safec_configure.out
  args:
    chdir: "{{ base_dir }}/libsafec-{{ safec_major_version }}.{{ safec_minor_version }}"
    creates: /tmp/safec_configure.out
- name: "Make safec"
  shell: make  >> /tmp/safec_make.out
  args:
    chdir: "{{ base_dir }}/libsafec-{{ safec_major_version }}.{{ safec_minor_version }}"
    creates: /tmp/safec_make.out
- name: "Make install safec"
  shell: make install >> /tmp/safec_makeinstall.out
  args:
    chdir: "{{ base_dir }}/libsafec-{{ safec_major_version }}.{{ safec_minor_version }}"
    creates: /tmp/safec_makeinstall.out
# gperfools
- name: "Install gperfools, google’s thread-caching malloc used in chrome into /tmp,  Tcmalloc is optional but recommended"
  unarchive:
    src: https://github.com/gperftools/gperftools/releases/download/gperftools-{{ gperftools_version }}/gperftools-{{ gperftools_version }}.tar.gz
    dest: "{{ base_dir }}"
    creates: "{{ base_dir }}/gperftools-{{ gperftools_version }}"
    remote_src: yes
- name: "Configure gperftools"
  shell: ./configure  >> /tmp/gperftools_configure.out
  args:
    chdir: "{{ base_dir }}/gperftools-{{ gperftools_version }}"
    creates: /tmp/gperftools_configure.out
- name: "Make gperftools"
  shell: make -j$(nproc)  >> /tmp/gperftools_make.out
  args:
    chdir: "{{ base_dir }}/gperftools-{{ gperftools_version }}"
    creates: /tmp/gperftools_make.out
- name: "Make install gperftools"
  shell: make -j$(nproc) install >> /tmp/gperftools_makeinstall.out
  args:
    chdir: "{{ base_dir }}/gperftools-{{ gperftools_version }}"
    creates: /tmp/gperftools_makeinstall.out
#  snort3
- name: "Download compile, and install Snort 3 from the github repository"
  git:
    repo: git://github.com/snort3/snort3.git
    dest: "{{ base_dir }}/snort3"
- name: "debug the PKG_CONFIG_PATH"
  debug:
    var: PKG_CONFIG_PATH
- name: "Configure snort3 "
  # shell: ./configure_cmake.sh --prefix=/usr/local/snort >> /tmp/snort3_configure.out
  shell: ./configure_cmake.sh --prefix=/usr/local/snort --enable-tcmalloc  >> /tmp/snort3_configure.out
  args:
    chdir: "{{ base_dir }}/snort3"
    creates: /tmp/snort3_configure.out
- name: "Make snort3"
  shell: make -j$(nproc) >> /tmp/snort3_make.out
  args:
    chdir: "{{ base_dir }}/snort3/build"
    creates: /tmp/snort3_make.out
- name: "Make install snort3"
  shell: make -j$(nproc) install >> /tmp/snort3_makeinstall.out
  args:
    chdir: "{{ base_dir }}/snort3/build"
    creates: /tmp/snort3_makeinstall.out
